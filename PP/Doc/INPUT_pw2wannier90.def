input_description -distribution {Quantum ESPRESSO} -package PWscf -program pw2wannier90.x {

    toc {}

    intro {

        @b {Purpose of pw2wannier90.x:}
           Interface with wannier90 code to construct maximally localized Wannier functions.

           The code reads the nnkp file which is generated by the wannier90.x postprocessing run,
           (wannier90.x -pp seedname). Then, it computes and writes initial projection,
           overlap matrices, energy eigenvalues, and several other quantities that are used by
           the wannier90 code.
          
        @b {Structure of the input data:}
        ============================

           @b &INPUTPP
             ...
           @b /
    }

    namelist INPUTPP {

        var prefix -type CHARACTER {
            info { 
                prefix of files saved by program pw.x
            }
        }

        var outdir -type CHARACTER {
            info {
                directory containing the input data, i.e. the same as in pw.x
            }
            default {
                value of the @tt ESPRESSO_TMPDIR environment variable if set;
                current directory ('./') otherwise
            }
        }

        var seedname -type STRING {
            info {
                Seedname for the wannier90 calculation.
            }
            default { 'wannier' }
        }

        var spin_component -type STRING {
            info {
                Spin component.
                'up': spin up for collinear spin calculation
                'down': spin down for collinear spin calculation
                'none': for no-spin or non-collinear calculation
            }
            default { 'none' }
        }

        var wan_mode -type STRING {
            info {
                'standalone': for standalone execution of wannier90
                'library': for wannier90 library mode
            }
            default { 'standalone' }
        }

        var write_unk -type LOGICAL {
            info {
                if .TRUE. write the periodic part of the Bloch functions in real space for plotting
                the Wannier functions in wannier90.
            }
            default { .FALSE. }
        }

        var reduce_unk -type LOGICAL {
            info {
                if .TRUE. reduce file-size (and resolution) of the real-space Bloch functions
                by a factor of @ref reduce_unk_factor along each direction.
                Only relevant if @ref write_unk = .true.
            }
            default { .FALSE. }
        }

        var reduce_unk_factor -type INTEGER {
            info {
                The reduction factor per direction for @ref reduce_unk. Default 2 means a reduction
                of 2x2x2 = 8 of the total number of grid points.
                Only relevant if @ref write_unk = .true.
            }
            default { 1 if @ref reduce_unk = .FALSE., 2 if @ref reduce_unk = .TRUE. }
        }

        var wvfn_formatted -type LOGICAL {
            info {
                if .TRUE. write the wavefunctions in Fortran formatted form.
                Only relevant if @ref write_unk = .true.
            }
            default { .FALSE. }
        }

        var write_amn -type LOGICAL {
            info {
                Set to .false. if A(k) is not required.
            }
            default { .TRUE. }
        }

        var scdm_proj -type LOGICAL {
            info {
                Set to .true. to compute amn using the SCDM projection.
            }
            default { .FALSE. }
        }

        var scdm_entanglement -type STRING {
            info {
                'isolated': use SCDM for isolated bands.
                'erfc': use erfc function as the SCDM occupation for entanglement bands.
                'gaussian': use gaussian function as the SCDM occupation for entanglement bands.
            }
            default { 'isolated' }
        }

        var scdm_mu -type REAL {
            info {
                Set to the chemical potential for the SCDM occupation.
                Only relevant if @ref scdm_entanglement = 'erfc' or 'gaussian'.
            }
        }

        var scdm_sigma -type REAL {
            info {
                Set to the smearing for the SCDM occupation.
                Only relevant if @ref scdm_entanglement = 'erfc' or 'gaussian'.
            }
        }

        var atom_proj -type LOGICAL {
            info {
                Set to .true. to compute amn using the pseudo-atomic wavefunctions
                from pseudopotentials as the initial projection.
            }
            default { .FALSE. }
        }

        dimension atom_proj_exclude -start 1 -end n_exclude_proj -type INTEGER {
            info {
                Set to the index of the pseudo-atomic wavefunctions to be excluded
                from the initial projection. This is useful for excluding the
                semicore states from the initial projection.
                Only relevant if @ref atom_proj = .true.
            }
            default { empty }
        }

        var atom_proj_ext -type LOGICAL {
            info {
                Set to .true. to use the external pseudo-atomic wavefunctions
                from the files stored in @ref atom_proj_dir as the initial projection.
                Only relevant if @ref atom_proj = .true.
            }
            default { .FALSE. }
        }

        var atom_proj_dir -type CHARACTER {
            info {
                Set to the directory containing the external pseudo-atomic wavefunctions.
                The file names should be of the form SPECIES.dat, where SPECIES is the
                species name of the atom.
                For more details, see the wannier90 user guide and examples.
                Only relevant if @ref atom_proj_ext = .true.
            }
        }

        var atom_proj_ortho -type LOGICAL {
            info {
                Set to .true. to orthonormalize the pseudo-atomic wavefunctions
                before computing the inner product between Bloch states and
                the pseudo-atomic wavefunctions.
                It is recommended to keep this to .true., set it to .false. only
                if you know what you are doing.
                Only relevant if @ref atom_proj = .true.
            }
            default { .TRUE. }
        }

        var write_mmn -type LOGICAL {
            info {
                Set to .false. if M(k,b) is not required.
            }
            default { .TRUE. }
        }

        var write_spn -type LOGICAL {
            info {
                Set to .true. to write out the matrix elements of spin operator
                S between Bloch states (non-collinear spin calculation only).
            }
            default { .FALSE. }
        }

        var spn_formatted -type LOGICAL {
            info {
                Set to .true. to write spn data as a formatted file.
                Only relevant if @ref write_spn = .true.
            }
            default { .FALSE. }
        }

        var write_uHu -type LOGICAL {
            info {
                Set to .true. to write out the matrix elements of
                < unk+b1 | Hk | umk+b2 >.
            }
            default { .FALSE. }
        }

        var uHu_formatted -type LOGICAL {
            info {
                Set to .true. to write uHu data as a Fortran formatted file.
                Only relevant if @ref write_uHu = .true.
            }
            default { .FALSE. }
        }

        var write_uIu -type LOGICAL {
            info {
                Set to .true. to write out the matrix elements of
                < unk+b1 | umk+b2 >.
            }
            default { .FALSE. }
        }

        var uIu_formatted -type LOGICAL {
            info {
                Set to .true. to write uIu data as a Fortran formatted file.
                Only relevant if @ref write_uIu = .true.
            }
            default { .FALSE. }
        }


        var write_sHu -type LOGICAL {
            info {
                Set to .true. to write out the matrix elements of
                < unk | s H | umk+b >, which is used in the Ryoo's method
                to compute spin Hall conductivity. For more details, see the
                wannier90 user guide and examples.
            }
            default { .FALSE. }
        }

        var sHu_formatted -type LOGICAL {
            info {
                Set to .true. to write sHu data as a Fortran formatted file.
                Only relevant if @ref write_sHu = .true.
            }
            default { .FALSE. }
        }

        var write_sIu -type LOGICAL {
            info {
                Set to .true. to write out the matrix elements of
                < unk | s | umk+b >, which is used in the Ryoo's method
                to compute spin Hall conductivity. For more details, see the
                wannier90 user guide and examples.
            }
            default { .FALSE. }
        }

        var sIu_formatted -type LOGICAL {
            info {
                Set to .true. to write sIu data as a Fortran formatted file.
                Only relevant if @ref write_sIu = .true.
            }
            default { .FALSE. }
        }

        var write_unkg -type LOGICAL {
            info {
                Set to .true. to write the first few Fourier components of the
                periodic parts of the Bloch functions.
            }
            default { .FALSE. }
        }

        var irr_bz -type LOGICAL {
            info {
                Set to .true. to use irreducible BZ for computing amn/mmn/eig
                files. To differentiate from the standard full BZ case, the
                files will use the extension names iamn/immn/ieig, respectively.
                For more details, see the wannier90 user guide and examples.
            }
            default { .FALSE. }
        }

        var write_dmn -type LOGICAL {
            info {
                Set to .true. to construct symmetry-adapted Wannier functions.
            }
            default { .FALSE. }
        }

        var read_sym -type LOGICAL {
            info {
                Set to .true. to customize symmetry operations to be used in symmetry-adapted mode.
                When read_sym = .true., an additional input seedname.sym is required.
                Only relevant if @ref write_dmn = .true.
            }
            default { .FALSE. }
        }

    }
}
