                                                                                      
                                       ``:oss/                                        
                           `.+s+.     .+ys--yh+     `./ss+.                           
                          -sh//yy+`   +yy   +yy    -+h+-oyy                           
                          -yh- .oyy/.-sh.   .syo-.:sy-  /yh                           
                 `.-.`    `yh+   -oyyyo.     `/syys:    oys      `.`                  
               `/+ssys+-` `sh+      `                   oys`   .:osyo`                
               -yh- ./syyooyo`                          .sys+/oyo--yh/                
               `yy+    .-:-.                             `-/+/:`  -sh-                
                /yh.                                              oys                 
          ``..---hho---------`   .---------..`      `.-----.`    -hd+---.             
       `./osmNMMMMMMMMMMMMMMMs. +NNMMMMMMMMNNmh+.   yNMMMMMNm-  oNMMMMMNmo++:`        
       +sy--/sdMMMhyyyyyyyNMMh- .oyNMMmyyyyyhNMMm+` -yMMMdyyo:` .oyyNMMNhs+syy`       
       -yy/   /MMM+.`-+/``mMMy-   `mMMh:`````.dMMN:` `MMMy-`-dhhy```mMMy:``+hs        
        -yy+` /MMMo:-mMM+`-oo/.    mMMh:     `dMMN/`  dMMm:`dMMMMy..MMMo-.+yo`        
         .sys`/MMMMNNMMMs-         mMMmyooooymMMNo:   oMMM/sMMMMMM++MMN//oh:          
          `sh+/MMMhyyMMMs- `-`     mMMMMMMMMMNmy+-`   -MMMhMMMsmMMmdMMd/yy+           
    `-/+++oyy-/MMM+.`/hh/.`mNm:`   mMMd+/////:-.`      NMMMMMd/:NMMMMMy:/yyo/:.`      
   +os+//:-..-oMMMo:--:::-/MMMo. .-mMMd+---`           hMMMMN+. oMMMMMo. `-+osyso:`   
   syo     `mNMMMMMNNNNNNNNMMMo.oNNMMMMMNNNN:`         +MMMMs:`  dMMMN/`     ``:syo   
   /yh`     :syyyyyyyyyyyyyyyy+.`+syyyyyyyyo:`         .oyys:`   .oyys:`        +yh   
   -yh-        ````````````````    `````````              ``        ``          oys   
   -+h/------------------------::::::::://////++++++++++++++++++++++///////::::/yd:   
   shdddddddddddddddddddddddddddddhhhhhhhhyyyyyssssssssssssssssyyyyyyyhhhhhhhddddh`   
                                                                                      
 Lee, H., PoncÃ©, S., Bushick, K., Hajinazar, S., Lafuente-Bartolome, J.,Leveillee, J.,
    Lian, C., Lihm, J., Macheda, F., Mori, H., Paudyal, H., Sio, W., Tiwari, S.,      
 Zacharias, M., Zhang, X., Bonini, N., Kioupakis, E., Margine, E.R., and Giustino F., 
                                                     npj Comput Mater 9, 156 (2023)   
                                                                                      

     Program EPW v.5.8 starts on  9Jan2024 at 13:48:23 

     This program is part of the open-source Quantum ESPRESSO suite
     for quantum simulation of materials; please cite
         "P. Giannozzi et al., J. Phys.:Condens. Matter 21 395502 (2009);
         "P. Giannozzi et al., J. Phys.:Condens. Matter 29 465901 (2017);
         "P. Giannozzi et al., J. Chem. Phys. 152 154105 (2020);
          URL http://www.quantum-espresso.org", 
     in publications or presentations arising from this work. More details at
     http://www.quantum-espresso.org/quote

     Parallel version (MPI), running on     4 processors

     MPI processes distributed on     1 nodes
     K-points division:     npool     =       4
     34259 MiB available memory on the printing compute node when the environment starts
 
     Reading input from epw1.in

     Reading supplied temperature list.

     Reading xml data from directory:

     ./si.save/

     IMPORTANT: XC functional enforced from input :
     Exchange-correlation= PBE
                           (   1   4   3   4   0   0   0)
     Any further DFT definition will be discarded
     Please, verify this is what you really want

 
     G-vector sticks info
     --------------------
     sticks:   dense  smooth     PW     G-vecs:    dense   smooth      PW
     Sum         859     859    271                16889    16889    2975
 
     Using Slab Decomposition
 
     Reading collected, re-writing distributed wavefunctions

     --                                                                         

     bravais-lattice index     =            2
     lattice parameter (a_0)   =      10.2620  a.u.
     unit-cell volume          =     270.1693 (a.u.)^3
     number of atoms/cell      =            2
     number of atomic types    =            1
     kinetic-energy cut-off    =      60.0000  Ry
     charge density cut-off    =     240.0000  Ry
     Exchange-correlation= PBE
                           (   1   4   3   4   0   0   0)


     celldm(1)=   10.26200  celldm(2)=    0.00000  celldm(3)=    0.00000
     celldm(4)=    0.00000  celldm(5)=    0.00000  celldm(6)=    0.00000

     crystal axes: (cart. coord. in units of a_0)
               a(1) = ( -0.5000  0.0000  0.5000 )  
               a(2) = (  0.0000  0.5000  0.5000 )  
               a(3) = ( -0.5000  0.5000  0.0000 )  

     reciprocal axes: (cart. coord. in units 2 pi/a_0)
               b(1) = ( -1.0000 -1.0000  1.0000 )  
               b(2) = (  1.0000  1.0000  1.0000 )  
               b(3) = ( -1.0000  1.0000 -1.0000 )  


     Atoms inside the unit cell: 

   Cartesian axes

     site n.  atom      mass           positions (a_0 units)
        1     Si     28.0855   tau( 1) = (    0.00000    0.00000    0.00000  )
        2     Si     28.0855   tau( 2) = (    0.25000    0.25000    0.25000  )
 
     49 Sym.Ops. (with q -> -q+G )


     G cutoff =  640.1998  (  16889 G-vectors)     FFT grid: ( 36, 36, 36)
     number of k points=   64
                       cart. coord. in units 2pi/a_0
        k(    1) = (   0.0000000   0.0000000   0.0000000), wk =   0.0312500
        k(    2) = (  -0.2500000   0.2500000  -0.2500000), wk =   0.0312500
        k(    3) = (  -0.5000000   0.5000000  -0.5000000), wk =   0.0312500
        k(    4) = (  -0.7500000   0.7500000  -0.7500000), wk =   0.0312500
        k(    5) = (   0.2500000   0.2500000   0.2500000), wk =   0.0312500
        k(    6) = (   0.0000000   0.5000000   0.0000000), wk =   0.0312500
        k(    7) = (  -0.2500000   0.7500000  -0.2500000), wk =   0.0312500
        k(    8) = (  -0.5000000   1.0000000  -0.5000000), wk =   0.0312500
        k(    9) = (   0.5000000   0.5000000   0.5000000), wk =   0.0312500
        k(   10) = (   0.2500000   0.7500000   0.2500000), wk =   0.0312500
        k(   11) = (   0.0000000   1.0000000   0.0000000), wk =   0.0312500
        k(   12) = (  -0.2500000   1.2500000  -0.2500000), wk =   0.0312500
        k(   13) = (   0.7500000   0.7500000   0.7500000), wk =   0.0312500
        k(   14) = (   0.5000000   1.0000000   0.5000000), wk =   0.0312500
        k(   15) = (   0.2500000   1.2500000   0.2500000), wk =   0.0312500
        k(   16) = (   0.0000000   1.5000000   0.0000000), wk =   0.0312500
        k(   17) = (  -0.2500000  -0.2500000   0.2500000), wk =   0.0312500
        k(   18) = (  -0.5000000   0.0000000   0.0000000), wk =   0.0312500
        k(   19) = (  -0.7500000   0.2500000  -0.2500000), wk =   0.0312500
        k(   20) = (  -1.0000000   0.5000000  -0.5000000), wk =   0.0312500
        k(   21) = (   0.0000000   0.0000000   0.5000000), wk =   0.0312500
        k(   22) = (  -0.2500000   0.2500000   0.2500000), wk =   0.0312500
        k(   23) = (  -0.5000000   0.5000000   0.0000000), wk =   0.0312500
        k(   24) = (  -0.7500000   0.7500000  -0.2500000), wk =   0.0312500
        k(   25) = (   0.2500000   0.2500000   0.7500000), wk =   0.0312500
        k(   26) = (   0.0000000   0.5000000   0.5000000), wk =   0.0312500
        k(   27) = (  -0.2500000   0.7500000   0.2500000), wk =   0.0312500
        k(   28) = (  -0.5000000   1.0000000   0.0000000), wk =   0.0312500
        k(   29) = (   0.5000000   0.5000000   1.0000000), wk =   0.0312500
        k(   30) = (   0.2500000   0.7500000   0.7500000), wk =   0.0312500
        k(   31) = (   0.0000000   1.0000000   0.5000000), wk =   0.0312500
        k(   32) = (  -0.2500000   1.2500000   0.2500000), wk =   0.0312500
        k(   33) = (  -0.5000000  -0.5000000   0.5000000), wk =   0.0312500
        k(   34) = (  -0.7500000  -0.2500000   0.2500000), wk =   0.0312500
        k(   35) = (  -1.0000000   0.0000000   0.0000000), wk =   0.0312500
        k(   36) = (  -1.2500000   0.2500000  -0.2500000), wk =   0.0312500
        k(   37) = (  -0.2500000  -0.2500000   0.7500000), wk =   0.0312500
        k(   38) = (  -0.5000000   0.0000000   0.5000000), wk =   0.0312500
        k(   39) = (  -0.7500000   0.2500000   0.2500000), wk =   0.0312500
        k(   40) = (  -1.0000000   0.5000000   0.0000000), wk =   0.0312500
        k(   41) = (   0.0000000   0.0000000   1.0000000), wk =   0.0312500
        k(   42) = (  -0.2500000   0.2500000   0.7500000), wk =   0.0312500
        k(   43) = (  -0.5000000   0.5000000   0.5000000), wk =   0.0312500
        k(   44) = (  -0.7500000   0.7500000   0.2500000), wk =   0.0312500
        k(   45) = (   0.2500000   0.2500000   1.2500000), wk =   0.0312500
        k(   46) = (   0.0000000   0.5000000   1.0000000), wk =   0.0312500
        k(   47) = (  -0.2500000   0.7500000   0.7500000), wk =   0.0312500
        k(   48) = (  -0.5000000   1.0000000   0.5000000), wk =   0.0312500
        k(   49) = (  -0.7500000  -0.7500000   0.7500000), wk =   0.0312500
        k(   50) = (  -1.0000000  -0.5000000   0.5000000), wk =   0.0312500
        k(   51) = (  -1.2500000  -0.2500000   0.2500000), wk =   0.0312500
        k(   52) = (  -1.5000000   0.0000000   0.0000000), wk =   0.0312500
        k(   53) = (  -0.5000000  -0.5000000   1.0000000), wk =   0.0312500
        k(   54) = (  -0.7500000  -0.2500000   0.7500000), wk =   0.0312500
        k(   55) = (  -1.0000000   0.0000000   0.5000000), wk =   0.0312500
        k(   56) = (  -1.2500000   0.2500000   0.2500000), wk =   0.0312500
        k(   57) = (  -0.2500000  -0.2500000   1.2500000), wk =   0.0312500
        k(   58) = (  -0.5000000   0.0000000   1.0000000), wk =   0.0312500
        k(   59) = (  -0.7500000   0.2500000   0.7500000), wk =   0.0312500
        k(   60) = (  -1.0000000   0.5000000   0.5000000), wk =   0.0312500
        k(   61) = (   0.0000000   0.0000000   1.5000000), wk =   0.0312500
        k(   62) = (  -0.2500000   0.2500000   1.2500000), wk =   0.0312500
        k(   63) = (  -0.5000000   0.5000000   1.0000000), wk =   0.0312500
        k(   64) = (  -0.7500000   0.7500000   0.7500000), wk =   0.0312500

     PseudoPot. # 1 for Si read from file:
     ../../pseudo/Si_r.upf
     MD5 check sum: c84abb4b0aac9c93a8e9f74896432a0a
     Pseudo is Norm-conserving + core correction, Zval =  4.0
     Generated using ONCVPSP code by D. R. Hamann
     Using radial grid of 1528 points,  6 beta functions with: 
                l(1) =   0
                l(2) =   0
                l(3) =   1
                l(4) =   1
                l(5) =   2
                l(6) =   2
     EPW          :      0.32s CPU      0.35s WALL

     EPW          :      0.32s CPU      0.35s WALL

     -------------------------------------------------------------------
     Wannierization on  4 x  4 x  4 electronic grid
     -------------------------------------------------------------------
 
     Spin CASE ( default = unpolarized )
 
     Initializing Wannier90
 
 
     Initial Wannier projections
 
     (   0.00000   0.00000   0.00000) :  l =  -3 mr =   1
     (   0.00000   0.00000   0.00000) :  l =  -3 mr =   2
     (   0.00000   0.00000   0.00000) :  l =  -3 mr =   3
     (   0.00000   0.00000   0.00000) :  l =  -3 mr =   4
     (  -0.25000   0.75000  -0.25000) :  l =  -3 mr =   1
     (  -0.25000   0.75000  -0.25000) :  l =  -3 mr =   2
     (  -0.25000   0.75000  -0.25000) :  l =  -3 mr =   3
     (  -0.25000   0.75000  -0.25000) :  l =  -3 mr =   4

      - Number of bands is ( 12)
      - Number of total bands is ( 12)
      - Number of excluded bands is (  0)
      - Number of wannier functions is (  8)
      - All guiding functions are given 
 
  Reading data about k-point neighbours 
 
      - All neighbours are found 
 
     AMN
      k points =    64 in    4 pools
            1 of   16 on ionode
            2 of   16 on ionode
            3 of   16 on ionode
            4 of   16 on ionode
            5 of   16 on ionode
            6 of   16 on ionode
            7 of   16 on ionode
            8 of   16 on ionode
            9 of   16 on ionode
           10 of   16 on ionode
           11 of   16 on ionode
           12 of   16 on ionode
           13 of   16 on ionode
           14 of   16 on ionode
           15 of   16 on ionode
           16 of   16 on ionode
 
     AMN calculated
 
     MMN
      k points =    64 in    4 pools
            1 of   16 on ionode
            2 of   16 on ionode
            3 of   16 on ionode
            4 of   16 on ionode
            5 of   16 on ionode
            6 of   16 on ionode
            7 of   16 on ionode
            8 of   16 on ionode
            9 of   16 on ionode
           10 of   16 on ionode
           11 of   16 on ionode
           12 of   16 on ionode
           13 of   16 on ionode
           14 of   16 on ionode
           15 of   16 on ionode
           16 of   16 on ionode
     MMN calculated
 
     Running Wannier90
 
     Wannier Function centers (cartesian, alat) and spreads (ang):
 
     (  -0.08518   0.08507   0.08505) :   1.63559
     (   0.08517   0.08508  -0.08514) :   1.63200
     (  -0.08518  -0.08506  -0.08515) :   1.63243
     (   0.08516  -0.08505   0.08506) :   1.63757
     (   0.33498   0.33535   0.33504) :   1.63265
     (   0.33498   0.16462   0.16504) :   1.63535
     (   0.16504   0.33534   0.16505) :   1.63774
     (   0.16502   0.16461   0.33505) :   1.63166
 
     -------------------------------------------------------------------
     WANNIER      :     28.43s CPU     28.68s WALL (       1 calls)
     -------------------------------------------------------------------

     Calculating kgmap

     Progress kgmap: ########################################
     kmaps        :      0.05s CPU      0.06s WALL (       1 calls)
     Symmetries of Bravais lattice:  48
     Symmetries of crystal:          48


     ===================================================================
     irreducible q point #    1
     ===================================================================

     Symmetries of small group of q: 48
          in addition sym. q -> -q+G:
 
     Number of q in the star =    1
     List of q in the star:
          1   0.000000000   0.000000000   0.000000000
     Imposing acoustic sum rule on the dynamical matrix
     Read dielectric tensor and effective charges
 
        q(    1 ) = (   0.0000000   0.0000000   0.0000000 )


     ===================================================================
     irreducible q point #    2
     ===================================================================

     Symmetries of small group of q: 12
          in addition sym. q -> -q+G:
 
     Number of q in the star =    4
     List of q in the star:
          1   0.500000000  -0.500000000   0.500000000
          2   0.500000000   0.500000000  -0.500000000
          3  -0.500000000  -0.500000000  -0.500000000
          4   0.500000000  -0.500000000  -0.500000000
     Message from routine init_vloc:
     Interpolation table for Vloc re-allocated
 
        q(    2 ) = (   0.5000000  -0.5000000   0.5000000 )
        q(    3 ) = (   0.5000000   0.5000000  -0.5000000 )
        q(    4 ) = (  -0.5000000  -0.5000000  -0.5000000 )
        q(    5 ) = (   0.5000000  -0.5000000  -0.5000000 )


     ===================================================================
     irreducible q point #    3
     ===================================================================

     Symmetries of small group of q: 16
          in addition sym. q -> -q+G:
 
     Number of q in the star =    3
     List of q in the star:
          1   0.000000000  -1.000000000   0.000000000
          2  -1.000000000   0.000000000   0.000000000
          3   0.000000000   0.000000000   1.000000000
 
        q(    6 ) = (   0.0000000  -1.0000000   0.0000000 )
        q(    7 ) = (  -1.0000000   0.0000000   0.0000000 )
        q(    8 ) = (   0.0000000   0.0000000   1.0000000 )

     Writing epmatq on .epb files


     The .epb files have been correctly written


     Band disentanglement is used: nbndsub =    8
     Construct the Wigner-Seitz cell using Wannier centers and atomic positions 
     Number of WS vectors for electrons      123
     Number of WS vectors for phonons       25
     Number of WS vectors for electron-phonon       25
     Maximum number of cores for efficient parallelization       50

     Inside velocity step 1
 

     Velocity matrix elements calculated
 
 
     Bloch2wane:          1 /          8
     Bloch2wane:          2 /          8
     Bloch2wane:          3 /          8
     Bloch2wane:          4 /          8
     Bloch2wane:          5 /          8
     Bloch2wane:          6 /          8
     Bloch2wane:          7 /          8
     Bloch2wane:          8 /          8
     Bloch2wanp:          1 /          7
     Bloch2wanp:          2 /          7
     Bloch2wanp:          3 /          7
     Bloch2wanp:          4 /          7
     Bloch2wanp:          5 /          7
     Bloch2wanp:          6 /          7
     Bloch2wanp:          7 /          7

     Writing Hamiltonian, Dynamical matrix and EP vertex in Wann rep to file

     ===================================================================
     Memory usage:  VmHWM =        95Mb
                   VmPeak =      3817Mb
     ===================================================================
     
     Using q-mesh file: ./LGX.txt
     Size of q point mesh for interpolation:        100
     Using k-mesh file: ./LGX.txt
     Size of k point mesh for interpolation:        200
     Max number of k points per pool:               50

     Fermi energy coarse grid =   6.339030 eV

     ===================================================================

     Fermi energy corresponds to the coarse k-mesh

     ===================================================================

              ibndmin =     2  ebndmin =     5.140 eV
              ibndmax =     6  ebndmax =     7.534 eV


     Number of ep-matrix elements per pool :         3750 ~=   29.30 Kb (@ 8 bytes/ DP)
     Number selected, total         100         100
     We only need to compute      100 q-points
      
     Progression iq (fine) =        100/       100
     ===================================================================
     Memory usage:  VmHWM =        95Mb
                   VmPeak =      3817Mb
     ===================================================================


     Unfolding on the coarse grid
     elphon_wrap  :     21.49s CPU     21.74s WALL (       1 calls)

     INITIALIZATION: 

     set_drhoc    :      0.02s CPU      0.02s WALL (       9 calls)
     init_vloc    :      0.02s CPU      0.02s WALL (       1 calls)
     init_us_1    :      0.01s CPU      0.01s WALL (       1 calls)



     Electron-Phonon interpolation
     ephwann      :      4.34s CPU      4.46s WALL (       1 calls)
     ep-interp    :      2.01s CPU      2.09s WALL (     100 calls)

     Ham: step 1  :      0.00s CPU      0.00s WALL (       1 calls)
     Ham: step 2  :      0.05s CPU      0.05s WALL (       1 calls)
     ep: step 1   :      0.00s CPU      0.00s WALL (       8 calls)
     ep: step 2   :      0.01s CPU      0.01s WALL (       8 calls)
     DynW2B       :      0.00s CPU      0.00s WALL (     100 calls)
     HamW2B       :      0.26s CPU      0.27s WALL (    6101 calls)
     ephW2Bp      :      0.60s CPU      0.66s WALL (     100 calls)
     ephW2B       :      0.14s CPU      0.14s WALL (    1286 calls)
     vmewan2bloch :      0.56s CPU      0.58s WALL (    5000 calls)
     vmewan2bloch :      0.56s CPU      0.58s WALL (    5000 calls)


     Total program execution
     EPW          :     54.57s CPU     55.23s WALL

     % Copyright (C) 2016-2023 EPW-Collaboration                                    
                                                                                    
     ===============================================================================
     Please consider citing the following papers.                                   
                                                                                                 
     % Paper describing the method on which EPW relies                                           
       F. Giustino and M. L. Cohen and S. G. Louie, Phys. Rev. B 76, 165108 (2007)               
                                                                                                 
     % Papers describing the EPW software                                                        
       H. Lee et al., npj Comput. Mater. 9, 156 (2023)                                           
       S. Ponc\'e, E.R. Margine, C. Verdi and F. Giustino, Comput. Phys. Commun. 209, 116 (2016) 
       J. Noffsinger et al., Comput. Phys. Commun. 181, 2140 (2010)                              
                                                                                                 
                                                                                    
     For your convenience, this information is also reported in the                 
     functionality-dependent EPW.bib file.                                          
     ===============================================================================
                                                                                    
