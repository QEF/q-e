                                                                                      
                                       ``:oss/                                        
                           `.+s+.     .+ys--yh+     `./ss+.                           
                          -sh//yy+`   +yy   +yy    -+h+-oyy                           
                          -yh- .oyy/.-sh.   .syo-.:sy-  /yh                           
                 `.-.`    `yh+   -oyyyo.     `/syys:    oys      `.`                  
               `/+ssys+-` `sh+      `                   oys`   .:osyo`                
               -yh- ./syyooyo`                          .sys+/oyo--yh/                
               `yy+    .-:-.                             `-/+/:`  -sh-                
                /yh.                                              oys                 
          ``..---hho---------`   .---------..`      `.-----.`    -hd+---.             
       `./osmNMMMMMMMMMMMMMMMs. +NNMMMMMMMMNNmh+.   yNMMMMMNm-  oNMMMMMNmo++:`        
       +sy--/sdMMMhyyyyyyyNMMh- .oyNMMmyyyyyhNMMm+` -yMMMdyyo:` .oyyNMMNhs+syy`       
       -yy/   /MMM+.`-+/``mMMy-   `mMMh:`````.dMMN:` `MMMy-`-dhhy```mMMy:``+hs        
        -yy+` /MMMo:-mMM+`-oo/.    mMMh:     `dMMN/`  dMMm:`dMMMMy..MMMo-.+yo`        
         .sys`/MMMMNNMMMs-         mMMmyooooymMMNo:   oMMM/sMMMMMM++MMN//oh:          
          `sh+/MMMhyyMMMs- `-`     mMMMMMMMMMNmy+-`   -MMMhMMMsmMMmdMMd/yy+           
    `-/+++oyy-/MMM+.`/hh/.`mNm:`   mMMd+/////:-.`      NMMMMMd/:NMMMMMy:/yyo/:.`      
   +os+//:-..-oMMMo:--:::-/MMMo. .-mMMd+---`           hMMMMN+. oMMMMMo. `-+osyso:`   
   syo     `mNMMMMMNNNNNNNNMMMo.oNNMMMMMNNNN:`         +MMMMs:`  dMMMN/`     ``:syo   
   /yh`     :syyyyyyyyyyyyyyyy+.`+syyyyyyyyo:`         .oyys:`   .oyys:`        +yh   
   -yh-        ````````````````    `````````              ``        ``          oys   
   -+h/------------------------::::::::://////++++++++++++++++++++++///////::::/yd:   
   shdddddddddddddddddddddddddddddhhhhhhhhyyyyyssssssssssssssssyyyyyyyhhhhhhhddddh`   
                                                                                      
 Lee, H., PoncÃ©, S., Bushick, K., Hajinazar, S., Lafuente-Bartolome, J.,Leveillee, J.,
    Lian, C., Lihm, J., Macheda, F., Mori, H., Paudyal, H., Sio, W., Tiwari, S.,      
 Zacharias, M., Zhang, X., Bonini, N., Kioupakis, E., Margine, E.R., and Giustino F., 
                                                     npj Comput Mater 9, 156 (2023)   
                                                                                      

     Program EPW v.5.8 starts on  9Jan2024 at 13:46:18 

     This program is part of the open-source Quantum ESPRESSO suite
     for quantum simulation of materials; please cite
         "P. Giannozzi et al., J. Phys.:Condens. Matter 21 395502 (2009);
         "P. Giannozzi et al., J. Phys.:Condens. Matter 29 465901 (2017);
         "P. Giannozzi et al., J. Chem. Phys. 152 154105 (2020);
          URL http://www.quantum-espresso.org", 
     in publications or presentations arising from this work. More details at
     http://www.quantum-espresso.org/quote

     Parallel version (MPI), running on     4 processors

     MPI processes distributed on     1 nodes
     K-points division:     npool     =       4
     34567 MiB available memory on the printing compute node when the environment starts
 
     Reading input from epw1.in

     No temperature supplied. Setting temps(:) to 300 K.

     Reading xml data from directory:

     ./lif.save/
     file Li.pbe-mt_fhi.UPF: wavefunction(s)  2p 4f renormalized
     file F.pbe-mt_fhi.UPF: wavefunction(s)  4f renormalized

     IMPORTANT: XC functional enforced from input :
     Exchange-correlation= PBE
                           (   1   4   3   4   0   0   0)
     Any further DFT definition will be discarded
     Please, verify this is what you really want

 
     G-vector sticks info
     --------------------
     sticks:   dense  smooth     PW     G-vecs:    dense   smooth      PW
     Sum         475     475    163                 6855     6855    1363
 
     Using Slab Decomposition
 
     Reading collected, re-writing distributed wavefunctions

     --------                                                                   

     bravais-lattice index     =            2
     lattice parameter (a_0)   =       7.5609  a.u.
     unit-cell volume          =     108.0579 (a.u.)^3
     number of atoms/cell      =            2
     number of atomic types    =            2
     kinetic-energy cut-off    =      60.0000  Ry
     charge density cut-off    =     240.0000  Ry
     Exchange-correlation= PBE
                           (   1   4   3   4   0   0   0)


     celldm(1)=    7.56088  celldm(2)=    0.00000  celldm(3)=    0.00000
     celldm(4)=    0.00000  celldm(5)=    0.00000  celldm(6)=    0.00000

     crystal axes: (cart. coord. in units of a_0)
               a(1) = ( -0.5000  0.0000  0.5000 )  
               a(2) = (  0.0000  0.5000  0.5000 )  
               a(3) = ( -0.5000  0.5000  0.0000 )  

     reciprocal axes: (cart. coord. in units 2 pi/a_0)
               b(1) = ( -1.0000 -1.0000  1.0000 )  
               b(2) = (  1.0000  1.0000  1.0000 )  
               b(3) = ( -1.0000  1.0000 -1.0000 )  


     Atoms inside the unit cell: 

   Cartesian axes

     site n.  atom      mass           positions (a_0 units)
        1     Li      6.9410   tau( 1) = (    0.00000    0.00000    0.00000  )
        2     F      18.9984   tau( 2) = (   -0.50000    0.50000    0.50000  )
 
     49 Sym.Ops. (with q -> -q+G )


     G cutoff =  347.5328  (   6855 G-vectors)     FFT grid: ( 27, 27, 27)
     number of k points=   64
                       cart. coord. in units 2pi/a_0
        k(    1) = (   0.0000000   0.0000000   0.0000000), wk =   0.0312500
        k(    2) = (  -0.2500000   0.2500000  -0.2500000), wk =   0.0312500
        k(    3) = (  -0.5000000   0.5000000  -0.5000000), wk =   0.0312500
        k(    4) = (  -0.7500000   0.7500000  -0.7500000), wk =   0.0312500
        k(    5) = (   0.2500000   0.2500000   0.2500000), wk =   0.0312500
        k(    6) = (   0.0000000   0.5000000   0.0000000), wk =   0.0312500
        k(    7) = (  -0.2500000   0.7500000  -0.2500000), wk =   0.0312500
        k(    8) = (  -0.5000000   1.0000000  -0.5000000), wk =   0.0312500
        k(    9) = (   0.5000000   0.5000000   0.5000000), wk =   0.0312500
        k(   10) = (   0.2500000   0.7500000   0.2500000), wk =   0.0312500
        k(   11) = (   0.0000000   1.0000000   0.0000000), wk =   0.0312500
        k(   12) = (  -0.2500000   1.2500000  -0.2500000), wk =   0.0312500
        k(   13) = (   0.7500000   0.7500000   0.7500000), wk =   0.0312500
        k(   14) = (   0.5000000   1.0000000   0.5000000), wk =   0.0312500
        k(   15) = (   0.2500000   1.2500000   0.2500000), wk =   0.0312500
        k(   16) = (   0.0000000   1.5000000   0.0000000), wk =   0.0312500
        k(   17) = (  -0.2500000  -0.2500000   0.2500000), wk =   0.0312500
        k(   18) = (  -0.5000000   0.0000000   0.0000000), wk =   0.0312500
        k(   19) = (  -0.7500000   0.2500000  -0.2500000), wk =   0.0312500
        k(   20) = (  -1.0000000   0.5000000  -0.5000000), wk =   0.0312500
        k(   21) = (   0.0000000   0.0000000   0.5000000), wk =   0.0312500
        k(   22) = (  -0.2500000   0.2500000   0.2500000), wk =   0.0312500
        k(   23) = (  -0.5000000   0.5000000   0.0000000), wk =   0.0312500
        k(   24) = (  -0.7500000   0.7500000  -0.2500000), wk =   0.0312500
        k(   25) = (   0.2500000   0.2500000   0.7500000), wk =   0.0312500
        k(   26) = (   0.0000000   0.5000000   0.5000000), wk =   0.0312500
        k(   27) = (  -0.2500000   0.7500000   0.2500000), wk =   0.0312500
        k(   28) = (  -0.5000000   1.0000000   0.0000000), wk =   0.0312500
        k(   29) = (   0.5000000   0.5000000   1.0000000), wk =   0.0312500
        k(   30) = (   0.2500000   0.7500000   0.7500000), wk =   0.0312500
        k(   31) = (   0.0000000   1.0000000   0.5000000), wk =   0.0312500
        k(   32) = (  -0.2500000   1.2500000   0.2500000), wk =   0.0312500
        k(   33) = (  -0.5000000  -0.5000000   0.5000000), wk =   0.0312500
        k(   34) = (  -0.7500000  -0.2500000   0.2500000), wk =   0.0312500
        k(   35) = (  -1.0000000   0.0000000   0.0000000), wk =   0.0312500
        k(   36) = (  -1.2500000   0.2500000  -0.2500000), wk =   0.0312500
        k(   37) = (  -0.2500000  -0.2500000   0.7500000), wk =   0.0312500
        k(   38) = (  -0.5000000   0.0000000   0.5000000), wk =   0.0312500
        k(   39) = (  -0.7500000   0.2500000   0.2500000), wk =   0.0312500
        k(   40) = (  -1.0000000   0.5000000   0.0000000), wk =   0.0312500
        k(   41) = (   0.0000000   0.0000000   1.0000000), wk =   0.0312500
        k(   42) = (  -0.2500000   0.2500000   0.7500000), wk =   0.0312500
        k(   43) = (  -0.5000000   0.5000000   0.5000000), wk =   0.0312500
        k(   44) = (  -0.7500000   0.7500000   0.2500000), wk =   0.0312500
        k(   45) = (   0.2500000   0.2500000   1.2500000), wk =   0.0312500
        k(   46) = (   0.0000000   0.5000000   1.0000000), wk =   0.0312500
        k(   47) = (  -0.2500000   0.7500000   0.7500000), wk =   0.0312500
        k(   48) = (  -0.5000000   1.0000000   0.5000000), wk =   0.0312500
        k(   49) = (  -0.7500000  -0.7500000   0.7500000), wk =   0.0312500
        k(   50) = (  -1.0000000  -0.5000000   0.5000000), wk =   0.0312500
        k(   51) = (  -1.2500000  -0.2500000   0.2500000), wk =   0.0312500
        k(   52) = (  -1.5000000   0.0000000   0.0000000), wk =   0.0312500
        k(   53) = (  -0.5000000  -0.5000000   1.0000000), wk =   0.0312500
        k(   54) = (  -0.7500000  -0.2500000   0.7500000), wk =   0.0312500
        k(   55) = (  -1.0000000   0.0000000   0.5000000), wk =   0.0312500
        k(   56) = (  -1.2500000   0.2500000   0.2500000), wk =   0.0312500
        k(   57) = (  -0.2500000  -0.2500000   1.2500000), wk =   0.0312500
        k(   58) = (  -0.5000000   0.0000000   1.0000000), wk =   0.0312500
        k(   59) = (  -0.7500000   0.2500000   0.7500000), wk =   0.0312500
        k(   60) = (  -1.0000000   0.5000000   0.5000000), wk =   0.0312500
        k(   61) = (   0.0000000   0.0000000   1.5000000), wk =   0.0312500
        k(   62) = (  -0.2500000   0.2500000   1.2500000), wk =   0.0312500
        k(   63) = (  -0.5000000   0.5000000   1.0000000), wk =   0.0312500
        k(   64) = (  -0.7500000   0.7500000   0.7500000), wk =   0.0312500

     PseudoPot. # 1 for Li read from file:
     ../../pseudo/Li.pbe-mt_fhi.UPF
     MD5 check sum: 3419f5616d131090147e867976aae79b
     Pseudo is Norm-conserving + core correction, Zval =  1.0
     Generated using FHI98PP, converted with fhi2upf.x v.5.0.2
     Using radial grid of  433 points,  3 beta functions with: 
                l(1) =   0
                l(2) =   1
                l(3) =   3

     PseudoPot. # 2 for F  read from file:
     ../../pseudo/F.pbe-mt_fhi.UPF
     MD5 check sum: bd08d802e66d287190150b65155e2e95
     Pseudo is Norm-conserving, Zval =  7.0
     Generated using FHI98PP, converted with fhi2upf.x v.5.0.2
     Using radial grid of  477 points,  3 beta functions with: 
                l(1) =   0
                l(2) =   1
                l(3) =   3
     EPW          :      0.26s CPU      0.30s WALL

     EPW          :      0.27s CPU      0.30s WALL

     -------------------------------------------------------------------
     Wannierization on  4 x  4 x  4 electronic grid
     -------------------------------------------------------------------
 
     Spin CASE ( default = unpolarized )
 
     Initializing Wannier90
 
 
     Initial Wannier projections
 
     (   0.50000   0.50000   0.50000) :  l =   1 mr =   1
     (   0.50000   0.50000   0.50000) :  l =   1 mr =   2
     (   0.50000   0.50000   0.50000) :  l =   1 mr =   3

      - Number of bands is (  3)
      - Number of total bands is ( 30)
      - Number of excluded bands is ( 27)
      - Number of wannier functions is (  3)
      - All guiding functions are given 
 
  Reading data about k-point neighbours 
 
      - All neighbours are found 
 
     AMN
      k points =    64 in    4 pools
            1 of   16 on ionode
            2 of   16 on ionode
            3 of   16 on ionode
            4 of   16 on ionode
            5 of   16 on ionode
            6 of   16 on ionode
            7 of   16 on ionode
            8 of   16 on ionode
            9 of   16 on ionode
           10 of   16 on ionode
           11 of   16 on ionode
           12 of   16 on ionode
           13 of   16 on ionode
           14 of   16 on ionode
           15 of   16 on ionode
           16 of   16 on ionode
 
     AMN calculated
 
     MMN
      k points =    64 in    4 pools
            1 of   16 on ionode
            2 of   16 on ionode
            3 of   16 on ionode
            4 of   16 on ionode
            5 of   16 on ionode
            6 of   16 on ionode
            7 of   16 on ionode
            8 of   16 on ionode
            9 of   16 on ionode
           10 of   16 on ionode
           11 of   16 on ionode
           12 of   16 on ionode
           13 of   16 on ionode
           14 of   16 on ionode
           15 of   16 on ionode
           16 of   16 on ionode
     MMN calculated
 
     Running Wannier90
 
     Wannier Function centers (cartesian, alat) and spreads (ang):
 
     (  -0.50000   0.50000   0.50000) :   0.54928
     (  -0.50000   0.50000   0.50000) :   0.54928
     (  -0.50000   0.50000   0.50000) :   0.54928
 
    Writing out Wannier function cube files

nr1s =   27, nr2s =   27, nr3s =   27
write_plot: wannier_plot_supercell =    4    4    4
      Wannier Function Num:    1       Maximum Im/Re Ratio =    0.000000
      Wannier Function Num:    2       Maximum Im/Re Ratio =    0.000000
      Wannier Function Num:    3       Maximum Im/Re Ratio =    0.000000


  cube files written
     -------------------------------------------------------------------
     WANNIER      :      2.45s CPU      2.67s WALL (       1 calls)
     -------------------------------------------------------------------

     Calculating kgmap

     Progress kgmap: ########################################
     kmaps        :      0.02s CPU      0.02s WALL (       1 calls)
     Symmetries of Bravais lattice:  48
     Symmetries of crystal:          48


     ===================================================================
     irreducible q point #    1
     ===================================================================

     Symmetries of small group of q: 48
          in addition sym. q -> -q+G:
 
     Number of q in the star =    1
     List of q in the star:
          1   0.000000000   0.000000000   0.000000000
     Imposing acoustic sum rule on the dynamical matrix
     Read dielectric tensor and effective charges
 
        q(    1 ) = (   0.0000000   0.0000000   0.0000000 )


     ===================================================================
     irreducible q point #    2
     ===================================================================

     Symmetries of small group of q:  6
 
     Number of q in the star =    8
     List of q in the star:
          1  -0.250000000   0.250000000  -0.250000000
          2   0.250000000  -0.250000000  -0.250000000
          3   0.250000000  -0.250000000   0.250000000
          4   0.250000000   0.250000000   0.250000000
          5  -0.250000000  -0.250000000  -0.250000000
          6  -0.250000000  -0.250000000   0.250000000
          7  -0.250000000   0.250000000   0.250000000
          8   0.250000000   0.250000000  -0.250000000
     Message from routine init_vloc:
     Interpolation table for Vloc re-allocated
 
        q(    2 ) = (  -0.2500000   0.2500000  -0.2500000 )
        q(    3 ) = (   0.2500000  -0.2500000  -0.2500000 )
        q(    4 ) = (   0.2500000  -0.2500000   0.2500000 )
        q(    5 ) = (   0.2500000   0.2500000   0.2500000 )
        q(    6 ) = (  -0.2500000  -0.2500000  -0.2500000 )
        q(    7 ) = (  -0.2500000  -0.2500000   0.2500000 )
        q(    8 ) = (  -0.2500000   0.2500000   0.2500000 )
        q(    9 ) = (   0.2500000   0.2500000  -0.2500000 )


     ===================================================================
     irreducible q point #    3
     ===================================================================

     Symmetries of small group of q: 12
          in addition sym. q -> -q+G:
 
     Number of q in the star =    4
     List of q in the star:
          1   0.500000000  -0.500000000   0.500000000
          2   0.500000000   0.500000000   0.500000000
          3  -0.500000000   0.500000000   0.500000000
          4   0.500000000   0.500000000  -0.500000000
 
        q(   10 ) = (   0.5000000  -0.5000000   0.5000000 )
        q(   11 ) = (   0.5000000   0.5000000   0.5000000 )
        q(   12 ) = (  -0.5000000   0.5000000   0.5000000 )
        q(   13 ) = (   0.5000000   0.5000000  -0.5000000 )


     ===================================================================
     irreducible q point #    4
     ===================================================================

     Symmetries of small group of q:  8
 
     Number of q in the star =    6
     List of q in the star:
          1   0.000000000   0.500000000   0.000000000
          2   0.000000000  -0.500000000   0.000000000
          3   0.500000000   0.000000000   0.000000000
          4   0.000000000   0.000000000   0.500000000
          5   0.000000000   0.000000000  -0.500000000
          6  -0.500000000   0.000000000   0.000000000
 
        q(   14 ) = (   0.0000000   0.5000000   0.0000000 )
        q(   15 ) = (   0.0000000  -0.5000000   0.0000000 )
        q(   16 ) = (   0.5000000   0.0000000   0.0000000 )
        q(   17 ) = (   0.0000000   0.0000000   0.5000000 )
        q(   18 ) = (   0.0000000   0.0000000  -0.5000000 )
        q(   19 ) = (  -0.5000000   0.0000000   0.0000000 )


     ===================================================================
     irreducible q point #    5
     ===================================================================

     Symmetries of small group of q:  2
 
     Number of q in the star =   24
     List of q in the star:
          1   0.750000000  -0.250000000   0.750000000
          2   0.750000000  -0.250000000  -0.750000000
          3  -0.750000000  -0.250000000  -0.750000000
          4  -0.750000000  -0.250000000   0.750000000
          5  -0.750000000   0.250000000  -0.750000000
          6  -0.250000000   0.750000000  -0.750000000
          7  -0.750000000   0.750000000  -0.250000000
          8   0.750000000   0.250000000   0.750000000
          9  -0.750000000   0.250000000   0.750000000
         10   0.750000000   0.250000000  -0.750000000
         11  -0.750000000   0.750000000   0.250000000
         12  -0.250000000   0.750000000   0.750000000
         13   0.250000000   0.750000000  -0.750000000
         14  -0.250000000  -0.750000000  -0.750000000
         15   0.750000000   0.750000000  -0.250000000
         16   0.750000000  -0.750000000   0.250000000
         17  -0.750000000  -0.750000000  -0.250000000
         18   0.250000000  -0.750000000   0.750000000
         19  -0.750000000  -0.750000000   0.250000000
         20   0.250000000   0.750000000   0.750000000
         21  -0.250000000  -0.750000000   0.750000000
         22   0.750000000   0.750000000   0.250000000
         23   0.250000000  -0.750000000  -0.750000000
         24   0.750000000  -0.750000000  -0.250000000
 
        q(   20 ) = (   0.7500000  -0.2500000   0.7500000 )
        q(   21 ) = (   0.7500000  -0.2500000  -0.7500000 )
        q(   22 ) = (  -0.7500000  -0.2500000  -0.7500000 )
        q(   23 ) = (  -0.7500000  -0.2500000   0.7500000 )
        q(   24 ) = (  -0.7500000   0.2500000  -0.7500000 )
        q(   25 ) = (  -0.2500000   0.7500000  -0.7500000 )
        q(   26 ) = (  -0.7500000   0.7500000  -0.2500000 )
        q(   27 ) = (   0.7500000   0.2500000   0.7500000 )
        q(   28 ) = (  -0.7500000   0.2500000   0.7500000 )
        q(   29 ) = (   0.7500000   0.2500000  -0.7500000 )
        q(   30 ) = (  -0.7500000   0.7500000   0.2500000 )
        q(   31 ) = (  -0.2500000   0.7500000   0.7500000 )
        q(   32 ) = (   0.2500000   0.7500000  -0.7500000 )
        q(   33 ) = (  -0.2500000  -0.7500000  -0.7500000 )
        q(   34 ) = (   0.7500000   0.7500000  -0.2500000 )
        q(   35 ) = (   0.7500000  -0.7500000   0.2500000 )
        q(   36 ) = (  -0.7500000  -0.7500000  -0.2500000 )
        q(   37 ) = (   0.2500000  -0.7500000   0.7500000 )
        q(   38 ) = (  -0.7500000  -0.7500000   0.2500000 )
        q(   39 ) = (   0.2500000   0.7500000   0.7500000 )
        q(   40 ) = (  -0.2500000  -0.7500000   0.7500000 )
        q(   41 ) = (   0.7500000   0.7500000   0.2500000 )
        q(   42 ) = (   0.2500000  -0.7500000  -0.7500000 )
        q(   43 ) = (   0.7500000  -0.7500000  -0.2500000 )


     ===================================================================
     irreducible q point #    6
     ===================================================================

     Symmetries of small group of q:  4
 
     Number of q in the star =   12
     List of q in the star:
          1   0.500000000   0.000000000   0.500000000
          2  -0.500000000   0.000000000   0.500000000
          3  -0.500000000   0.000000000  -0.500000000
          4   0.500000000   0.000000000  -0.500000000
          5   0.000000000   0.500000000  -0.500000000
          6  -0.500000000   0.500000000   0.000000000
          7   0.000000000   0.500000000   0.500000000
          8   0.000000000  -0.500000000  -0.500000000
          9   0.500000000   0.500000000   0.000000000
         10   0.500000000  -0.500000000   0.000000000
         11  -0.500000000  -0.500000000   0.000000000
         12   0.000000000  -0.500000000   0.500000000
 
        q(   44 ) = (   0.5000000   0.0000000   0.5000000 )
        q(   45 ) = (  -0.5000000   0.0000000   0.5000000 )
        q(   46 ) = (  -0.5000000   0.0000000  -0.5000000 )
        q(   47 ) = (   0.5000000   0.0000000  -0.5000000 )
        q(   48 ) = (   0.0000000   0.5000000  -0.5000000 )
        q(   49 ) = (  -0.5000000   0.5000000   0.0000000 )
        q(   50 ) = (   0.0000000   0.5000000   0.5000000 )
        q(   51 ) = (   0.0000000  -0.5000000  -0.5000000 )
        q(   52 ) = (   0.5000000   0.5000000   0.0000000 )
        q(   53 ) = (   0.5000000  -0.5000000   0.0000000 )
        q(   54 ) = (  -0.5000000  -0.5000000   0.0000000 )
        q(   55 ) = (   0.0000000  -0.5000000   0.5000000 )


     ===================================================================
     irreducible q point #    7
     ===================================================================

     Symmetries of small group of q: 16
          in addition sym. q -> -q+G:
 
     Number of q in the star =    3
     List of q in the star:
          1   0.000000000  -1.000000000   0.000000000
          2  -1.000000000   0.000000000   0.000000000
          3   0.000000000   0.000000000  -1.000000000
 
        q(   56 ) = (   0.0000000  -1.0000000   0.0000000 )
        q(   57 ) = (  -1.0000000   0.0000000   0.0000000 )
        q(   58 ) = (   0.0000000   0.0000000  -1.0000000 )


     ===================================================================
     irreducible q point #    8
     ===================================================================

     Symmetries of small group of q:  8
 
     Number of q in the star =    6
     List of q in the star:
          1  -0.500000000  -1.000000000   0.000000000
          2   0.000000000   1.000000000   0.500000000
          3   0.000000000  -1.000000000  -0.500000000
          4   0.500000000   1.000000000   0.000000000
          5  -1.000000000  -0.500000000   0.000000000
          6   0.000000000  -0.500000000  -1.000000000
 
        q(   59 ) = (  -0.5000000  -1.0000000   0.0000000 )
        q(   60 ) = (   0.0000000   1.0000000   0.5000000 )
        q(   61 ) = (   0.0000000  -1.0000000  -0.5000000 )
        q(   62 ) = (   0.5000000   1.0000000   0.0000000 )
        q(   63 ) = (  -1.0000000  -0.5000000   0.0000000 )
        q(   64 ) = (   0.0000000  -0.5000000  -1.0000000 )

     Computes the analytic long-range interaction for polar materials [lpolar]
      
     Use zone-centred Wigner-Seitz cells 
     Number of WS vectors for electrons       93
     Number of WS vectors for phonons       93
     Number of WS vectors for electron-phonon       93
     Maximum number of cores for efficient parallelization      558
     Results may improve by using use_ws == .TRUE. 

     Inside velocity step 1
 

     Velocity matrix elements calculated
 
 
     Bloch2wane:          1 /         64
     Bloch2wane:          2 /         64
     Bloch2wane:          3 /         64
     Bloch2wane:          4 /         64
     Bloch2wane:          5 /         64
     Bloch2wane:          6 /         64
     Bloch2wane:          7 /         64
     Bloch2wane:          8 /         64
     Bloch2wane:          9 /         64
     Bloch2wane:         10 /         64
     Bloch2wane:         11 /         64
     Bloch2wane:         12 /         64
     Bloch2wane:         13 /         64
     Bloch2wane:         14 /         64
     Bloch2wane:         15 /         64
     Bloch2wane:         16 /         64
     Bloch2wane:         17 /         64
     Bloch2wane:         18 /         64
     Bloch2wane:         19 /         64
     Bloch2wane:         20 /         64
     Bloch2wane:         21 /         64
     Bloch2wane:         22 /         64
     Bloch2wane:         23 /         64
     Bloch2wane:         24 /         64
     Bloch2wane:         25 /         64
     Bloch2wane:         26 /         64
     Bloch2wane:         27 /         64
     Bloch2wane:         28 /         64
     Bloch2wane:         29 /         64
     Bloch2wane:         30 /         64
     Bloch2wane:         31 /         64
     Bloch2wane:         32 /         64
     Bloch2wane:         33 /         64
     Bloch2wane:         34 /         64
     Bloch2wane:         35 /         64
     Bloch2wane:         36 /         64
     Bloch2wane:         37 /         64
     Bloch2wane:         38 /         64
     Bloch2wane:         39 /         64
     Bloch2wane:         40 /         64
     Bloch2wane:         41 /         64
     Bloch2wane:         42 /         64
     Bloch2wane:         43 /         64
     Bloch2wane:         44 /         64
     Bloch2wane:         45 /         64
     Bloch2wane:         46 /         64
     Bloch2wane:         47 /         64
     Bloch2wane:         48 /         64
     Bloch2wane:         49 /         64
     Bloch2wane:         50 /         64
     Bloch2wane:         51 /         64
     Bloch2wane:         52 /         64
     Bloch2wane:         53 /         64
     Bloch2wane:         54 /         64
     Bloch2wane:         55 /         64
     Bloch2wane:         56 /         64
     Bloch2wane:         57 /         64
     Bloch2wane:         58 /         64
     Bloch2wane:         59 /         64
     Bloch2wane:         60 /         64
     Bloch2wane:         61 /         64
     Bloch2wane:         62 /         64
     Bloch2wane:         63 /         64
     Bloch2wane:         64 /         64
     Bloch2wanp:          1 /         24
     Bloch2wanp:          2 /         24
     Bloch2wanp:          3 /         24
     Bloch2wanp:          4 /         24
     Bloch2wanp:          5 /         24
     Bloch2wanp:          6 /         24
     Bloch2wanp:          7 /         24
     Bloch2wanp:          8 /         24
     Bloch2wanp:          9 /         24
     Bloch2wanp:         10 /         24
     Bloch2wanp:         11 /         24
     Bloch2wanp:         12 /         24
     Bloch2wanp:         13 /         24
     Bloch2wanp:         14 /         24
     Bloch2wanp:         15 /         24
     Bloch2wanp:         16 /         24
     Bloch2wanp:         17 /         24
     Bloch2wanp:         18 /         24
     Bloch2wanp:         19 /         24
     Bloch2wanp:         20 /         24
     Bloch2wanp:         21 /         24
     Bloch2wanp:         22 /         24
     Bloch2wanp:         23 /         24
     Bloch2wanp:         24 /         24

     Writing Hamiltonian, Dynamical matrix and EP vertex in Wann rep to file

     ===================================================================
     Memory usage:  VmHWM =        83Mb
                   VmPeak =      3810Mb
     ===================================================================
     
     Using uniform q-mesh:     1    1    1
     Size of q point mesh for interpolation:          1
     Using uniform k-mesh:     1    1    1
     Size of k point mesh for interpolation:          2
     Max number of k points per pool:                2

     Fermi energy coarse grid =   0.487315 eV

     Skipping the first    1 bands:

     The Fermi level will be determined with   6.00000 electrons

     Fermi energy is calculated from the fine k-mesh: Ef =   0.612315 eV

     ===================================================================

              ibndmin =     1  ebndmin =     0.487 eV
              ibndmax =     3  ebndmax =     0.487 eV


     Number of ep-matrix elements per pool :           54 ~=    0.42 Kb (@ 8 bytes/ DP)
     We only need to compute        1 q-points
      
     ===================================================================
     Memory usage:  VmHWM =        83Mb
                   VmPeak =      3810Mb
     ===================================================================


     Unfolding on the coarse grid
     elphon_wrap  :     25.59s CPU     26.74s WALL (       1 calls)

     INITIALIZATION: 

     set_drhoc    :      0.01s CPU      0.02s WALL (      65 calls)
     init_vloc    :      0.03s CPU      0.03s WALL (       1 calls)
     init_us_1    :      0.04s CPU      0.04s WALL (       1 calls)



     Electron-Phonon interpolation
     ephwann      :      0.41s CPU      0.43s WALL (       1 calls)
     ep-interp    :      0.00s CPU      0.00s WALL (       1 calls)

     Ham: step 1  :      0.00s CPU      0.00s WALL (       1 calls)
     Ham: step 2  :      0.01s CPU      0.01s WALL (       1 calls)
     ep: step 1   :      0.00s CPU      0.01s WALL (      64 calls)
     ep: step 2   :      0.04s CPU      0.04s WALL (      64 calls)
     DynW2B       :      0.00s CPU      0.00s WALL (       1 calls)
     HamW2B       :      0.00s CPU      0.00s WALL (       5 calls)
     ephW2Bp      :      0.00s CPU      0.00s WALL (       1 calls)
     ephW2B       :      0.00s CPU      0.00s WALL (       1 calls)
     vmewan2bloch :      0.00s CPU      0.00s WALL (       2 calls)
     vmewan2bloch :      0.00s CPU      0.00s WALL (       2 calls)


     Total program execution
     EPW          :     28.71s CPU     30.13s WALL

     % Copyright (C) 2016-2023 EPW-Collaboration                                    
                                                                                    
     ===============================================================================
     Please consider citing the following papers.                                   
                                                                                                 
     % Paper describing the method on which EPW relies                                           
       F. Giustino and M. L. Cohen and S. G. Louie, Phys. Rev. B 76, 165108 (2007)               
                                                                                                 
     % Papers describing the EPW software                                                        
       H. Lee et al., npj Comput. Mater. 9, 156 (2023)                                           
       S. Ponc\'e, E.R. Margine, C. Verdi and F. Giustino, Comput. Phys. Commun. 209, 116 (2016) 
       J. Noffsinger et al., Comput. Phys. Commun. 181, 2140 (2010)                              
                                                                                                 
                                                                                             
     % Since you used the [lpolar] input, please consider also citing                        
       C. Verdi and F. Giustino, Phys. Rev. Lett. 115, 176401 (2015)                         
                                                                                    
     For your convenience, this information is also reported in the                 
     functionality-dependent EPW.bib file.                                          
     ===============================================================================
                                                                                    
