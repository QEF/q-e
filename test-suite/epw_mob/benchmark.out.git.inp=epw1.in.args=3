                                                                                      
                                       ``:oss/                                        
                           `.+s+.     .+ys--yh+     `./ss+.                           
                          -sh//yy+`   +yy   +yy    -+h+-oyy                           
                          -yh- .oyy/.-sh.   .syo-.:sy-  /yh                           
                 `.-.`    `yh+   -oyyyo.     `/syys:    oys      `.`                  
               `/+ssys+-` `sh+      `                   oys`   .:osyo`                
               -yh- ./syyooyo`                          .sys+/oyo--yh/                
               `yy+    .-:-.                             `-/+/:`  -sh-                
                /yh.                                              oys                 
          ``..---hho---------`   .---------..`      `.-----.`    -hd+---.             
       `./osmNMMMMMMMMMMMMMMMs. +NNMMMMMMMMNNmh+.   yNMMMMMNm-  oNMMMMMNmo++:`        
       +sy--/sdMMMhyyyyyyyNMMh- .oyNMMmyyyyyhNMMm+` -yMMMdyyo:` .oyyNMMNhs+syy`       
       -yy/   /MMM+.`-+/``mMMy-   `mMMh:`````.dMMN:` `MMMy-`-dhhy```mMMy:``+hs        
        -yy+` /MMMo:-mMM+`-oo/.    mMMh:     `dMMN/`  dMMm:`dMMMMy..MMMo-.+yo`        
         .sys`/MMMMNNMMMs-         mMMmyooooymMMNo:   oMMM/sMMMMMM++MMN//oh:          
          `sh+/MMMhyyMMMs- `-`     mMMMMMMMMMNmy+-`   -MMMhMMMsmMMmdMMd/yy+           
    `-/+++oyy-/MMM+.`/hh/.`mNm:`   mMMd+/////:-.`      NMMMMMd/:NMMMMMy:/yyo/:.`      
   +os+//:-..-oMMMo:--:::-/MMMo. .-mMMd+---`           hMMMMN+. oMMMMMo. `-+osyso:`   
   syo     `mNMMMMMNNNNNNNNMMMo.oNNMMMMMNNNN:`         +MMMMs:`  dMMMN/`     ``:syo   
   /yh`     :syyyyyyyyyyyyyyyy+.`+syyyyyyyyo:`         .oyys:`   .oyys:`        +yh   
   -yh-        ````````````````    `````````              ``        ``          oys   
   -+h/------------------------::::::::://////++++++++++++++++++++++///////::::/yd:   
   shdddddddddddddddddddddddddddddhhhhhhhhyyyyyssssssssssssssssyyyyyyyhhhhhhhddddh`   
                                                                                      
  S. Ponce, E. R. Margine, C. Verdi, and F. Giustino,                                 
                                                Comput. Phys. Commun. 209, 116 (2016) 
                                                                                      

     Program EPW v.5.2.0 starts on  9Jul2020 at 18:50:57 

     This program is part of the open-source Quantum ESPRESSO suite
     for quantum simulation of materials; please cite
         "P. Giannozzi et al., J. Phys.:Condens. Matter 21 395502 (2009);
         "P. Giannozzi et al., J. Phys.:Condens. Matter 29 465901 (2017);
          URL http://www.quantum-espresso.org", 
     in publications or presentations arising from this work. More details at
     http://www.quantum-espresso.org/quote

     Parallel version (MPI), running on     4 processors

     MPI processes distributed on     1 nodes
     K-points division:     npool     =       4
     Fft bands division:     nmany     =       1

     Reading xml data from directory:

     ./si.save/

     IMPORTANT: XC functional enforced from input :
     Exchange-correlation= PBE
                           (   1   4   3   4   0   0   0)
     Any further DFT definition will be discarded
     Please, verify this is what you really want

 
     G-vector sticks info
     --------------------
     sticks:   dense  smooth     PW     G-vecs:    dense   smooth      PW
     Sum         211     211     85                 2109     2109     531
 
     Reading collected, re-writing distributed wavefunctions

     --                                                                         

     bravais-lattice index     =            2
     lattice parameter (a_0)   =      10.2620  a.u.
     unit-cell volume          =     270.1693 (a.u.)^3
     number of atoms/cell      =            2
     number of atomic types    =            1
     kinetic-energy cut-off    =      15.0000  Ry
     charge density cut-off    =      60.0000  Ry
     Exchange-correlation= PBE
                           (   1   4   3   4   0   0   0)
     Non magnetic calculation with spin-orbit

     celldm(1)=   10.26200  celldm(2)=    0.00000  celldm(3)=    0.00000
     celldm(4)=    0.00000  celldm(5)=    0.00000  celldm(6)=    0.00000

     crystal axes: (cart. coord. in units of a_0)
               a(1) = ( -0.5000  0.0000  0.5000 )  
               a(2) = (  0.0000  0.5000  0.5000 )  
               a(3) = ( -0.5000  0.5000  0.0000 )  

     reciprocal axes: (cart. coord. in units 2 pi/a_0)
               b(1) = ( -1.0000 -1.0000  1.0000 )  
               b(2) = (  1.0000  1.0000  1.0000 )  
               b(3) = ( -1.0000  1.0000 -1.0000 )  


     Atoms inside the unit cell: 

   Cartesian axes

     site n.  atom      mass           positions (a_0 units)
        1        Si  28.0855   tau( 1) = (    0.00000    0.00000    0.00000  )
        2        Si  28.0855   tau( 2) = (    0.25000    0.25000    0.25000  )
 
     49 Sym.Ops. (with q -> -q+G )


     G cutoff =  160.0499  (   2109 G-vectors)     FFT grid: ( 20, 20, 20)
     number of k points=   64
                       cart. coord. in units 2pi/a_0
        k(    1) = (   0.0000000   0.0000000   0.0000000), wk =   0.0156250
        k(    2) = (  -0.2500000   0.2500000  -0.2500000), wk =   0.0156250
        k(    3) = (  -0.5000000   0.5000000  -0.5000000), wk =   0.0156250
        k(    4) = (  -0.7500000   0.7500000  -0.7500000), wk =   0.0156250
        k(    5) = (   0.2500000   0.2500000   0.2500000), wk =   0.0156250
        k(    6) = (   0.0000000   0.5000000   0.0000000), wk =   0.0156250
        k(    7) = (  -0.2500000   0.7500000  -0.2500000), wk =   0.0156250
        k(    8) = (  -0.5000000   1.0000000  -0.5000000), wk =   0.0156250
        k(    9) = (   0.5000000   0.5000000   0.5000000), wk =   0.0156250
        k(   10) = (   0.2500000   0.7500000   0.2500000), wk =   0.0156250
        k(   11) = (   0.0000000   1.0000000   0.0000000), wk =   0.0156250
        k(   12) = (  -0.2500000   1.2500000  -0.2500000), wk =   0.0156250
        k(   13) = (   0.7500000   0.7500000   0.7500000), wk =   0.0156250
        k(   14) = (   0.5000000   1.0000000   0.5000000), wk =   0.0156250
        k(   15) = (   0.2500000   1.2500000   0.2500000), wk =   0.0156250
        k(   16) = (   0.0000000   1.5000000   0.0000000), wk =   0.0156250
        k(   17) = (  -0.2500000  -0.2500000   0.2500000), wk =   0.0156250
        k(   18) = (  -0.5000000   0.0000000   0.0000000), wk =   0.0156250
        k(   19) = (  -0.7500000   0.2500000  -0.2500000), wk =   0.0156250
        k(   20) = (  -1.0000000   0.5000000  -0.5000000), wk =   0.0156250
        k(   21) = (   0.0000000   0.0000000   0.5000000), wk =   0.0156250
        k(   22) = (  -0.2500000   0.2500000   0.2500000), wk =   0.0156250
        k(   23) = (  -0.5000000   0.5000000   0.0000000), wk =   0.0156250
        k(   24) = (  -0.7500000   0.7500000  -0.2500000), wk =   0.0156250
        k(   25) = (   0.2500000   0.2500000   0.7500000), wk =   0.0156250
        k(   26) = (   0.0000000   0.5000000   0.5000000), wk =   0.0156250
        k(   27) = (  -0.2500000   0.7500000   0.2500000), wk =   0.0156250
        k(   28) = (  -0.5000000   1.0000000   0.0000000), wk =   0.0156250
        k(   29) = (   0.5000000   0.5000000   1.0000000), wk =   0.0156250
        k(   30) = (   0.2500000   0.7500000   0.7500000), wk =   0.0156250
        k(   31) = (   0.0000000   1.0000000   0.5000000), wk =   0.0156250
        k(   32) = (  -0.2500000   1.2500000   0.2500000), wk =   0.0156250
        k(   33) = (  -0.5000000  -0.5000000   0.5000000), wk =   0.0156250
        k(   34) = (  -0.7500000  -0.2500000   0.2500000), wk =   0.0156250
        k(   35) = (  -1.0000000   0.0000000   0.0000000), wk =   0.0156250
        k(   36) = (  -1.2500000   0.2500000  -0.2500000), wk =   0.0156250
        k(   37) = (  -0.2500000  -0.2500000   0.7500000), wk =   0.0156250
        k(   38) = (  -0.5000000   0.0000000   0.5000000), wk =   0.0156250
        k(   39) = (  -0.7500000   0.2500000   0.2500000), wk =   0.0156250
        k(   40) = (  -1.0000000   0.5000000   0.0000000), wk =   0.0156250
        k(   41) = (   0.0000000   0.0000000   1.0000000), wk =   0.0156250
        k(   42) = (  -0.2500000   0.2500000   0.7500000), wk =   0.0156250
        k(   43) = (  -0.5000000   0.5000000   0.5000000), wk =   0.0156250
        k(   44) = (  -0.7500000   0.7500000   0.2500000), wk =   0.0156250
        k(   45) = (   0.2500000   0.2500000   1.2500000), wk =   0.0156250
        k(   46) = (   0.0000000   0.5000000   1.0000000), wk =   0.0156250
        k(   47) = (  -0.2500000   0.7500000   0.7500000), wk =   0.0156250
        k(   48) = (  -0.5000000   1.0000000   0.5000000), wk =   0.0156250
        k(   49) = (  -0.7500000  -0.7500000   0.7500000), wk =   0.0156250
        k(   50) = (  -1.0000000  -0.5000000   0.5000000), wk =   0.0156250
        k(   51) = (  -1.2500000  -0.2500000   0.2500000), wk =   0.0156250
        k(   52) = (  -1.5000000   0.0000000   0.0000000), wk =   0.0156250
        k(   53) = (  -0.5000000  -0.5000000   1.0000000), wk =   0.0156250
        k(   54) = (  -0.7500000  -0.2500000   0.7500000), wk =   0.0156250
        k(   55) = (  -1.0000000   0.0000000   0.5000000), wk =   0.0156250
        k(   56) = (  -1.2500000   0.2500000   0.2500000), wk =   0.0156250
        k(   57) = (  -0.2500000  -0.2500000   1.2500000), wk =   0.0156250
        k(   58) = (  -0.5000000   0.0000000   1.0000000), wk =   0.0156250
        k(   59) = (  -0.7500000   0.2500000   0.7500000), wk =   0.0156250
        k(   60) = (  -1.0000000   0.5000000   0.5000000), wk =   0.0156250
        k(   61) = (   0.0000000   0.0000000   1.5000000), wk =   0.0156250
        k(   62) = (  -0.2500000   0.2500000   1.2500000), wk =   0.0156250
        k(   63) = (  -0.5000000   0.5000000   1.0000000), wk =   0.0156250
        k(   64) = (  -0.7500000   0.7500000   0.7500000), wk =   0.0156250

     PseudoPot. # 1 for Si read from file:
     ../../pseudo/Si_r.upf
     MD5 check sum: c84abb4b0aac9c93a8e9f74896432a0a
     Pseudo is Norm-conserving + core correction, Zval =  4.0
     Generated using ONCVPSP code by D. R. Hamann
     Using radial grid of 1528 points, 10 beta functions with: 
                l(1) =   0
                l(2) =   0
                l(3) =   1
                l(4) =   1
                l(5) =   1
                l(6) =   1
                l(7) =   2
                l(8) =   2
                l(9) =   2
               l(10) =   2
     EPW          :      0.19s CPU      0.24s WALL

     EPW          :      0.21s CPU      0.26s WALL

     -------------------------------------------------------------------
     Wannierization on  4 x  4 x  4 electronic grid
     -------------------------------------------------------------------
 
     Spin CASE ( non-collinear )
 
     Initializing Wannier90
 
 
     Initial Wannier projections
 
     (   0.00000   0.00000   0.00000) :  l =  -3 mr =   1
     (   0.00000   0.00000   0.00000) :  l =  -3 mr =   1
     (   0.00000   0.00000   0.00000) :  l =  -3 mr =   2
     (   0.00000   0.00000   0.00000) :  l =  -3 mr =   2
     (   0.00000   0.00000   0.00000) :  l =  -3 mr =   3
     (   0.00000   0.00000   0.00000) :  l =  -3 mr =   3
     (   0.00000   0.00000   0.00000) :  l =  -3 mr =   4
     (   0.00000   0.00000   0.00000) :  l =  -3 mr =   4
     (  -0.25000   0.75000  -0.25000) :  l =  -3 mr =   1
     (  -0.25000   0.75000  -0.25000) :  l =  -3 mr =   1
     (  -0.25000   0.75000  -0.25000) :  l =  -3 mr =   2
     (  -0.25000   0.75000  -0.25000) :  l =  -3 mr =   2
     (  -0.25000   0.75000  -0.25000) :  l =  -3 mr =   3
     (  -0.25000   0.75000  -0.25000) :  l =  -3 mr =   3
     (  -0.25000   0.75000  -0.25000) :  l =  -3 mr =   4
     (  -0.25000   0.75000  -0.25000) :  l =  -3 mr =   4

      - Number of bands is ( 20)
      - Number of total bands is ( 20)
      - Number of excluded bands is (  0)
      - Number of wannier functions is ( 16)
      - All guiding functions are given 
 
  Reading data about k-point neighbours 
 
      - All neighbours are found 
 
     AMN
      k points =    64 in    4 pools
            1 of   16 on ionode
            2 of   16 on ionode
            3 of   16 on ionode
            4 of   16 on ionode
            5 of   16 on ionode
            6 of   16 on ionode
            7 of   16 on ionode
            8 of   16 on ionode
            9 of   16 on ionode
           10 of   16 on ionode
           11 of   16 on ionode
           12 of   16 on ionode
           13 of   16 on ionode
           14 of   16 on ionode
           15 of   16 on ionode
           16 of   16 on ionode
 
     AMN calculated
 
     MMN
      k points =    64 in    4 pools
            1 of   16 on ionode
            2 of   16 on ionode
            3 of   16 on ionode
            4 of   16 on ionode
            5 of   16 on ionode
            6 of   16 on ionode
            7 of   16 on ionode
            8 of   16 on ionode
            9 of   16 on ionode
           10 of   16 on ionode
           11 of   16 on ionode
           12 of   16 on ionode
           13 of   16 on ionode
           14 of   16 on ionode
           15 of   16 on ionode
           16 of   16 on ionode
     MMN calculated
 
     Running Wannier90
 
     Wannier Function centers (cartesian, alat) and spreads (ang):
 
     (   0.04115   0.04115   0.04115) :   2.22692
     (   0.04115   0.04115   0.04115) :   2.22692
     (   0.04115  -0.04115  -0.04115) :   2.22692
     (   0.04115  -0.04115  -0.04115) :   2.22692
     (  -0.04115   0.04115  -0.04115) :   2.22692
     (  -0.04115   0.04115  -0.04115) :   2.22692
     (  -0.04115  -0.04115   0.04115) :   2.22692
     (  -0.04115  -0.04115   0.04115) :   2.22692
     (   0.33395   0.33395   0.33395) :   1.84645
     (   0.33395   0.33395   0.33395) :   1.84645
     (   0.33395   0.16605   0.16605) :   1.84645
     (   0.33395   0.16605   0.16605) :   1.84645
     (   0.16605   0.33395   0.16605) :   1.84645
     (   0.16605   0.33395   0.16605) :   1.84645
     (   0.16605   0.16605   0.33395) :   1.84645
     (   0.16605   0.16605   0.33395) :   1.84645
 
     -------------------------------------------------------------------
     WANNIER      :      2.56s CPU      4.17s WALL (       1 calls)
     -------------------------------------------------------------------

     Dipole matrix elements calculated
 

     Calculating kgmap

     Progress kgmap: ########################################
     kmaps        :      0.01s CPU      0.05s WALL (       1 calls)

     Reading interatomic force constants

     IFC last   -0.0032824
     Norm of the difference between old and new effective charges:    0.0000000
     Norm of the difference between old and new force-constants:    0.0000253
     Imposed crystal ASR

     Finished reading ifcs

     Symmetries of Bravais lattice:  48
     Symmetries of crystal:          48


     ===================================================================
     irreducible q point #    1
     ===================================================================

     Symmetries of small group of q: 48
          in addition sym. q -> -q+G:
 
     Number of q in the star =    1
     List of q in the star:
          1   0.000000000   0.000000000   0.000000000
     Read dielectric tensor and effective charges
     Imposing acoustic sum rule on the dynamical matrix
     Dyn mat calculated from ifcs
 
        q(    1 ) = (   0.0000000   0.0000000   0.0000000 )


     ===================================================================
     irreducible q point #    2
     ===================================================================

     Symmetries of small group of q: 12
          in addition sym. q -> -q+G:
 
     Number of q in the star =    4
     List of q in the star:
          1   0.500000000  -0.500000000   0.500000000
          2   0.500000000   0.500000000  -0.500000000
          3  -0.500000000  -0.500000000  -0.500000000
          4   0.500000000  -0.500000000  -0.500000000
     Dyn mat calculated from ifcs
 
        q(    2 ) = (   0.5000000  -0.5000000   0.5000000 )
        q(    3 ) = (   0.5000000   0.5000000  -0.5000000 )
        q(    4 ) = (  -0.5000000  -0.5000000  -0.5000000 )
        q(    5 ) = (   0.5000000  -0.5000000  -0.5000000 )


     ===================================================================
     irreducible q point #    3
     ===================================================================

     Symmetries of small group of q: 16
          in addition sym. q -> -q+G:
 
     Number of q in the star =    3
     List of q in the star:
          1   0.000000000  -1.000000000   0.000000000
          2  -1.000000000   0.000000000   0.000000000
          3   0.000000000   0.000000000   1.000000000
     Dyn mat calculated from ifcs
 
        q(    6 ) = (   0.0000000  -1.0000000   0.0000000 )
        q(    7 ) = (  -1.0000000   0.0000000   0.0000000 )
        q(    8 ) = (   0.0000000   0.0000000   1.0000000 )

     Writing epmatq on .epb files


     The .epb files have been correctly written


     Band disentanglement is used: nbndsub =   16
     Use zone-centred Wigner-Seitz cells 
     Number of WS vectors for electrons       93
     Number of WS vectors for phonons       19
     Number of WS vectors for electron-phonon       19
     Maximum number of cores for efficient parallelization      114
     Results may improve by using use_ws == .TRUE. 
 
     Bloch2wane:          1 /          8
     Bloch2wane:          2 /          8
     Bloch2wane:          3 /          8
     Bloch2wane:          4 /          8
     Bloch2wane:          5 /          8
     Bloch2wane:          6 /          8
     Bloch2wane:          7 /          8
     Bloch2wane:          8 /          8
 
     Bloch2wanp:          1 /          5
     Bloch2wanp:          2 /          5
     Bloch2wanp:          3 /          5
     Bloch2wanp:          4 /          5
     Bloch2wanp:          5 /          5

     Writing Hamiltonian, Dynamical matrix and EP vertex in Wann rep to file

     ===================================================================
     Memory usage:  VmHWM =       114Mb
                   VmPeak =       460Mb
     ===================================================================
     
     Using q-mesh file: ./LGX.txt
     Size of q point mesh for interpolation:        100
     Using k-mesh file: ./LGX.txt
     Size of k point mesh for interpolation:        200
     Max number of k points per pool:               50

     Fermi energy coarse grid =   6.302835 eV

     ===================================================================

     Fermi energy corresponds to the coarse k-mesh

     ===================================================================

              ibndmin =     3  ebndmin =     0.375
              ibndmax =    12  ebndmax =     0.551


     Number of ep-matrix elements per pool :        15000 ~=  117.19 Kb (@ 8 bytes/ DP)
     Number selected, total         100         100
     We only need to compute      100 q-points
      
     Progression iq (fine) =        100/       100
     ===================================================================
     Memory usage:  VmHWM =       114Mb
                   VmPeak =       460Mb
     ===================================================================


     Unfolding on the coarse grid
     elphon_wrap  :     15.66s CPU     16.66s WALL (       1 calls)

     INITIALIZATION: 

     set_drhoc    :      0.07s CPU      0.07s WALL (       9 calls)
     init_vloc    :      0.00s CPU      0.00s WALL (       1 calls)
     init_us_1    :      0.01s CPU      0.01s WALL (       2 calls)



     Electron-Phonon interpolation
     ephwann      :      1.32s CPU      2.37s WALL (       1 calls)
     ep-interp    :      0.91s CPU      1.15s WALL (     100 calls)

     Ham: step 1  :      0.00s CPU      0.00s WALL (       1 calls)
     Ham: step 2  :      0.00s CPU      0.01s WALL (       1 calls)
     ep: step 1   :      0.00s CPU      0.00s WALL (      48 calls)
     ep: step 2   :      1.25s CPU      2.29s WALL (       1 calls)
     DynW2B       :      0.00s CPU      0.00s WALL (     100 calls)
     HamW2B       :      0.30s CPU      0.31s WALL (    6076 calls)
     ephW2Bp      :      0.27s CPU      0.49s WALL (     100 calls)
     ephW2B       :      0.10s CPU      0.11s WALL (    1052 calls)


     Total program execution
     EPW          :     19.74s CPU     23.45s WALL

                                                                                          
 Please consider citing:                                                                  
 S. Ponce, E. R. Margine, C. Verdi and F. Giustino, Comput. Phys. Commun. 209, 116 (2016) 
                                                                                          
