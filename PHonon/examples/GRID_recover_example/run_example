#!/bin/sh

# run from directory where this script is
cd `dirname $0`
EXAMPLE_DIR=`pwd`

# check whether echo has the -e option
if test "`echo -e`" = "-e" ; then ECHO=echo ; else ECHO="echo -e" ; fi

$ECHO
$ECHO "$EXAMPLE_DIR : starting"
$ECHO
$ECHO "This example shows how to calculate the phonon dispersion on a GRID"
$ECHO "for AlAs in zincblende structure. Both q-points and irreps are split."

# set the needed environment variables
. ../../../environment_variables

# required executables and pseudopotentials
BIN_LIST="pw.x ph.x q2r.x matdyn.x plotband.x"
PSEUDO_LIST="Al.pz-vbc.UPF As.pz-bhs.UPF"

$ECHO
$ECHO "  executables directory: $BIN_DIR"
$ECHO "  pseudo directory:      $PSEUDO_DIR"
$ECHO "  temporary directory:   $TMP_DIR"
$ECHO "  checking that needed directories and files exist...\c"

# check for gnuplot
GP_COMMAND=`which gnuplot 2>/dev/null`
if [ "$GP_COMMAND" = "" ]; then
        $ECHO
        $ECHO "gnuplot not in PATH"
        $ECHO "Results will not be plotted"
fi

# check for directories
for DIR in "$BIN_DIR" "$PSEUDO_DIR" ; do
    if test ! -d $DIR ; then
        $ECHO
        $ECHO "ERROR: $DIR not existent or not a directory"
        $ECHO "Aborting"
        exit 1
    fi
done
for DIR in "$TMP_DIR" "$EXAMPLE_DIR/results" ; do
    if test ! -d $DIR ; then
        mkdir $DIR
    fi
done
cd $EXAMPLE_DIR/results

# check for executables
for FILE in $BIN_LIST ; do
    if test ! -x $BIN_DIR/$FILE ; then
        $ECHO
        $ECHO "ERROR: $BIN_DIR/$FILE not existent or not executable"
        $ECHO "Aborting"
        exit 1
    fi
done

# check for pseudopotentials
for FILE in $PSEUDO_LIST ; do
    if test ! -r $PSEUDO_DIR/$FILE ; then
       $ECHO
       $ECHO "Downloading $FILE to $PSEUDO_DIR...\c"
            $WGET $PSEUDO_DIR/$FILE $NETWORK_PSEUDO/$FILE 2> /dev/null
    fi
    if test $? != 0; then
        $ECHO
        $ECHO "ERROR: $PSEUDO_DIR/$FILE not existent or not readable"
        $ECHO "Aborting"
        exit 1
    fi
done
$ECHO " done"

# how to run executables
PW_COMMAND="$PARA_PREFIX $BIN_DIR/pw.x $PARA_POSTFIX"
PH_COMMAND="$PARA_PREFIX $BIN_DIR/ph.x $PARA_POSTFIX"
Q2R_COMMAND="$PARA_PREFIX $BIN_DIR/q2r.x $PARA_POSTFIX"
MATDYN_COMMAND="$PARA_PREFIX $BIN_DIR/matdyn.x $PARA_POSTFIX"
PLOTBAND_COMMAND="$BIN_DIR/plotband.x"
$ECHO
$ECHO "  running pw.x as:     $PW_COMMAND"
$ECHO "  running ph.x as:     $PH_COMMAND"
$ECHO "  running q2r.x as:    $Q2R_COMMAND"
$ECHO "  running matdyn.x as: $MATDYN_COMMAND"
$ECHO "  running plotband.x as: $PLOTBAND_COMMAND"
$ECHO "  running gnuplot as: $GP_COMMAND"
$ECHO

# clean TMP_DIR
$ECHO "  cleaning $TMP_DIR...\c"
rm -rf $TMP_DIR/alas*
rm -rf $TMP_DIR/_ph0/alas*
for q in `seq 1 8 ` ; do
for irr in `seq 1 6` ; do
rm -rf $TMP_DIR/$q.$irr
done
done
$ECHO " done"

PREFIX='alas'

# self-consistent calculation
cat > alas.scf.in << EOF
 &control
    calculation='scf'
    restart_mode='from_scratch',
    tstress = .true.
    tprnfor = .true.
    prefix='$PREFIX',
    pseudo_dir = '$PSEUDO_DIR/',
    outdir='$TMP_DIR/'
 /
 &system
    ibrav=  2, celldm(1) =10.50, nat=  2, ntyp= 2,
    ecutwfc =16.0
 /
 &electrons
    conv_thr =  1.0d-8
    mixing_beta = 0.7
 /
ATOMIC_SPECIES
 Al  26.98  Al.pz-vbc.UPF
 As  74.92  As.pz-bhs.UPF
ATOMIC_POSITIONS (alat)
 Al 0.00 0.00 0.00
 As 0.25 0.25 0.25
K_POINTS
 2
 0.25 0.25 0.25 1.0
 0.25 0.25 0.75 3.0
EOF
$ECHO "  running the scf calculation...\c"
$PW_COMMAND < alas.scf.in > alas.scf.out
check_failure $?
$ECHO " done"

# phonon calculation on a (444) uniform grid of q-points
cat > alas.ph.prep.in << EOF
phonons of AlAs
 &inputph
  tr2_ph=1.0d-12,
  prefix='$PREFIX',
  ldisp=.true.,
  nq1=4, nq2=4, nq3=4
  amass(1)=26.98,
  amass(2)=74.92,
  start_irr=0,
  last_irr=0,
  outdir='$TMP_DIR/',
  fildyn='$PREFIX.dyn',
 /
EOF
$ECHO "  running the phonon calculation ...\c"
$PH_COMMAND < alas.ph.prep.in > alas.ph.prep.out
check_failure $?
$ECHO " done"

for q in `seq 1 8 ` ; do

for irr in `seq 1 6` ; do

cat > alas.ph.in.$q.$irr << EOF
phonons of AlAs
 &inputph
  tr2_ph=1.0d-12,
  prefix='$PREFIX',
  ldisp=.true.,
  nq1=4, nq2=4, nq3=4
  start_q=$q
  last_q=$q
  start_irr=$irr
  last_irr=$irr
  max_seconds=0.5,
  recover=.true.,
  amass(1)=26.98,
  amass(2)=74.92,
  outdir="$TMP_DIR/$q.$irr",
  fildyn='$PREFIX.dyn',
 /
EOF

mkdir $TMP_DIR/$q.$irr
cp -r $TMP_DIR/$PREFIX.* $TMP_DIR/$q.$irr
mkdir -p $TMP_DIR/$q.$irr/_ph0/$PREFIX.phsave
cp -r $TMP_DIR/_ph0/$PREFIX.phsave/* $TMP_DIR/$q.$irr/_ph0/$PREFIX.phsave

$ECHO "  running the phonon calculation for q= " $q " irr=" $irr "...\c"
$PH_COMMAND < alas.ph.in.$q.$irr > alas.ph.out.$q.$irr
$ECHO " done"

done
done
#
# redo the previous calculation another time to complete the
# unfinished calculations
#
for q in `seq 1 8 ` ; do

for irr in `seq 1 6` ; do

cat > alas.ph.rec.in.$q.$irr << EOF
phonons of AlAs
 &inputph
  tr2_ph=1.0d-12,
  prefix='$PREFIX',
  ldisp=.true.,
  nq1=4, nq2=4, nq3=4
  start_q=$q
  last_q=$q
  start_irr=$irr
  last_irr=$irr
  recover=.true.,
  amass(1)=26.98,
  amass(2)=74.92,
  outdir="$TMP_DIR/$q.$irr",
  fildyn='$PREFIX.dyn',
 /
EOF

$ECHO "  recovering the phonon calculation for q= " $q " irr=" $irr "...\c"
$PH_COMMAND < alas.ph.rec.in.$q.$irr > alas.ph.rec.out.$q.$irr
$ECHO " done"

done
done
#
#  Collecting all results in a single directory:
#

for q in `seq 1 8 ` ; do

for irr in `seq 1 6` ; do

\cp -f $TMP_DIR/$q.$irr/_ph0/$PREFIX.phsave/dynmat.$q.$irr.xml $TMP_DIR/_ph0/$PREFIX.phsave 2> /dev/null

done
#
#  collect also the representation 0 (contribution to the dynamical
#  matrix independent from the induced charge).
#
\cp -f $TMP_DIR/$q.1/_ph0/$PREFIX.phsave/dynmat.$q.0.xml $TMP_DIR/_ph0/$PREFIX.phsave 2> /dev/null

done
#
# cp electric field part
#
\cp -f $TMP_DIR/1.1/_ph0/$PREFIX.phsave/tensors.xml $TMP_DIR/_ph0/$PREFIX.phsave

cat > alas.ph.collect.in << EOF
phonons of AlAs
 &inputph
  tr2_ph=1.0d-12,
  prefix='$PREFIX',
  ldisp=.true.,
  nq1=4, nq2=4, nq3=4
  amass(1)=26.98,
  amass(2)=74.92,
  recover=.true.,
  outdir='$TMP_DIR/',
  fildyn='$PREFIX.dyn',
 /
EOF
$ECHO "  running the phonon calculation to collect the results...\c"
$PH_COMMAND < alas.ph.collect.in > alas.ph.collect.out
check_failure $?
$ECHO " done"

cat > q2r.in <<EOF
 &input
   fildyn='$PREFIX.dyn', zasr='simple', flfrc='$PREFIX.444.fc'
 /
EOF

$ECHO "  transforming C(q) => C(R)...\c"
$Q2R_COMMAND < q2r.in > q2r.out
check_failure $?
$ECHO " done"

cat > matdyn.in <<EOF
 &input
    asr='simple',  amass(1)=26.98, amass(2)=74.922,
    flfrc='$PREFIX.444.fc', flfrq='$PREFIX.freq', q_in_band_form=.true.,
 /
 6
  0.000 0.0 0.0   40
  1.0   0.0 0.0   20
  1.0   0.5 0.0   20
  1.0   1.0 0.0   40
  0.00  0.0 0.0   40
  0.5   0.5 0.5    1
EOF

$ECHO "  recalculating omega(q) from C(R)...\c"
$MATDYN_COMMAND < matdyn.in > matdyn.out
check_failure $?
$ECHO " done"

cat > plotband.in <<EOF
alas.freq
0 600
freq.plot
freq.ps
0.0
50.0 0.0
EOF

$ECHO "  writing the phonon dispersions in freq.plot...\c"
$PLOTBAND_COMMAND < plotband.in > /dev/null
check_failure $?
$ECHO " done"

if [ "$GP_COMMAND" = "" ]; then
    break
else
cat > gnuplot.tmp <<EOF
set encoding iso_8859_15
set terminal postscript enhanced solid color "Helvetica" 20
set output "alas.dispersions.ps"
#
set key off

set xrange [0:4.280239]
dim=450
set yrange [0:dim]
set arrow from 1,0. to 1,dim nohead  lw 2
set arrow from 2,0. to 2,dim nohead  lw 2
set arrow from 1.5,0. to 1.5,dim nohead  lw 2
set arrow from 3.4142,0. to 3.4142,dim nohead  lw 2
set ylabel "frequency (cm^{-1})"
unset xtics
lpos=-15
set label "{/Symbol G}" at -0.05,lpos
set label "X" at 0.95,lpos
set label "W" at 1.45,lpos
set label "X" at 1.95,lpos
set label "{/Symbol G}" at 3.37,lpos
set label "L" at 4.1897,lpos

plot "freq.plot" u 1:2 w l lw 3
EOF
$ECHO "  creating the postscript file alas.dispersion.ps...\c"
$GP_COMMAND gnuplot.tmp
check_failure $?
$ECHO " done"
fi

cat > phdos.in <<EOF
 &input
    asr='simple',  dos=.true. amass(1)=26.98, amass(2)=74.922,
    flfrc='$PREFIX.444.fc', fldos='$PREFIX.phdos', nk1=6,nk2=6,nk3=6
 /
EOF

$ECHO "  calculating phonon DOS ...\c"
$MATDYN_COMMAND < phdos.in > phdos.out
check_failure $?
$ECHO " done"

if [ "$GP_COMMAND" = "" ]; then
    break
else
cat > gnuplot1.tmp <<EOF
set encoding iso_8859_15
set terminal postscript enhanced solid color "Helvetica" 20
set output "alas.phdos.ps"
#
set key off
set xrange [0:450]
set xlabel "frequency (cm^{-1})"
set ylabel "DOS"
plot 'alas.phdos' u 1:2 w l lw 3
EOF
$ECHO "  generating plot of phonon_dos in the file alas.phdos.ps...\c"
$GP_COMMAND  gnuplot1.tmp
check_failure $?
$ECHO " done"
fi

$ECHO
$ECHO "$EXAMPLE_DIR: done"

